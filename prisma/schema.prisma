// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  image     String?
  provider  String? // "credentials" lub "google"
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  phone       String
  name        String
  owner       String
  category    String
  image       String?
  provider    String? // "credentials" lub "google"
  town        String
  zipcode     String
  district    String
  street      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workingDays WorkingDay[]
  services    SingleService[]
  categories  Categories[]
}

model WorkingDay {
  id        String   @id @default(uuid())
  dayOfWeek String
  open      String?
  close     String?
  isOpen    Boolean
  updatedAt DateTime @updatedAt

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  serviceID String
  clientId  String
  content   String
  rate      Int
  createdAt DateTime @default(now())
}

model SingleService {
  id           String   @id @default(uuid())
  name         String
  description  String
  price        String
  durationType String
  from         String
  to           String
  duration     String

  serviceId    String
  service      Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  categoryId   String
  category     Categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Categories {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  serviceId String
  service   Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  services  SingleService[]
}
